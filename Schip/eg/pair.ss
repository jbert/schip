(display (car '(1 . 2)))
(newline)
(display (cdr '(1 . 2)))
(newline)
(define (f first second . rest)
	(display "first: ")
	(display first)
	(newline)
	(display "second ")
	(display second)
	(newline)
	(display "rest ")
	(display rest)
	(newline))
(f 1 2 3 4 5 5 6 7 8 9)
(define eglist (list 1 2 3 4))
(define egpairs (cons 1 (cons 2 (cons 3 (cons 4 '())))))
(if (equal? eglist egpairs)
	(display "same")
	(display "different"))
(newline)

(define (map f l)
    (if (null? l)
        '()
        (cons (f (car l)) (map f (cdr l)))))

(define my-forms '(
		(1 2 . 3)
		(1 . (2 . 3))
		(1 2)
		(1 . 2)
		((1 . 2) . (3 . 4))
		((1 . 2) (3 . 4))
	))
(map (lambda (form)
	  (display "Form is: ")
	  (display form)
	  (newline))
 my-forms)
