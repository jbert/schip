DONE - schip.ast.node
	- s.a.atom (type=atom, value=string)
	- s.a.list (type=list, value=aref of ref-to-s.a.n)
		(we use ref-to-s.a.n so (cdr l) only needs to shallow-copy)
	- test: compose tree for (lambda (x) (+ 2 x))
		- walk tree with accessors

DONE - schip.environment
	- ->lookup(symbol) (returns a schip.evaluator.value)
	- ->push_frame(sym => val, sym => val, ...);
	- ->pop_frame()
	- test behavoiur needed for closures

DONE - schip.run.value
	- just isa schip.ast.node for now, since we're interpreting

- how to handle closures?
	- lamdba contains ref to env?

DONE - schip.parser
	- takes a str, generates list of s.a.list (or go for implicit begin?)

- schip.run
	DONE ->make_initial_environment
		+ empty plus primitives

	->eval_ast_tree(tree, env)
	- takes an s.a.list + s.env and returns an s.r.v and modifies s.env
		- eval:
			- s.a.atom	=> s.r.value representing atom
			- s.a.list	=> switch(car list) (perl 5.10!)
								-> special form
								-> lookup form to get value
									if isa primitive prim->invoke
									error unless val isa s.a.list+car=lambda
									eval-lambda with (cdr form) args
	- debugging errors
		- decorate AST with line number (and col?)
		- more uniform error reporting (typed exception?)

	- special forms
		DONE - begin
		DONE - define 
			- introduces new lexical binding - is that what we want?
		DONE - lambda
		DONE - quote
		DONE - if
		- defmacro
		- let (primitive or special form? define in terms of lambda?)
	- primitives
		- cons/car/cdr (could do lambda implementation)

	- add boolean type and type coercion
		- #t and #f parse to s.ast.bool
		- is a bool a number? (No, you don't want addition etc)
		- coerce arg to 'if' to boolean
		- (or just add is_true method to s.ast?)



- can we get as far as compiling lambdas to perl code?
	- they could install into the environment in the same way that the
	initially supplied primitives do
